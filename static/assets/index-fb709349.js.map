{"version":3,"mappings":"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","names":["logo$1","SidebarData","isDarkTheme","jsx","BiUserCircle","MdSettingsSuggest","IoMdHelpCircleOutline","MdOutlineFeedback","MdLogout","GeneralHelp","chatdsi_usage_guidelines","app_support","chatdsi_landing_page","jsxs","styles","Separator","accessApi","response","parsedResponse","logoutApi","chatApi","options","url","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","uploadApi","formData","file","index","Approaches","ThemeContext","createContext","ThemeProvider","children","setIsDarkTheme","useState","toggleTheme","prevTheme","useEffect","className","useTheme","context","useContext","Switch","checked","onChange","getStyles","getStyles1","Navbar","onParameters","isSidebarOpen","setIsSidebarOpen","promptTemplate","setPromptTemplate","isOpen","openHelpWindow","dismissHelpWindow","useBoolean","isConfigPanelOpen","setIsConfigPanelOpen","promptHasChanged","useRef","userName","setUserName","navbarRef","handleClickOutside","event","getCookie","name","cookies","i","cookie","decodedName","closeConfigPanel","onPromptTemplateChange","_ev","newValue","isDraggable","toggleIsDraggable","modalPropsStyles","DialogType","modalProps","React","showSidebar","handleHelpClick","e","createHashRouter","__vitePreload","handleLogout","data","errorText","error","handleFeedbackClick","sidebarItems","IconContext","IoIcons.IoMdMenu","item","Link","Fragment","Dialog","DialogFooter","PrimaryButton","TextField","NavSection","pageTitle","pageSubTitle","logo","Layout","RecoilRoot","Outlet","parseAnswerToHtml","answer","followupQuestions","parsedAnswer","match","content","regex","matches","codeSnippet","AnswerIcon","japaneseFontFamily","Answer","onFollowupQuestionClicked","showFollowupQuestions","isAnswerCompleted","regenerateResponse","regenerateQuestion","useMemo","DOMPurify","handleExportTXT","txtBlob","saveAs","handleExportPDF","doc","jsPDF","margin","topMargin","bottomMargin","cursorY","remainingText","lineHeight","availableHeight","fontSize","fontBytes","res","base64String","byte","addNewPage","line","preprocessHTML","html","handleExportDOCX","processedHtml","tempElement","paragraphs","node","Paragraph","TextRun","element","textRuns","childNode","childElement","Document","blob","Packer","showOptions","setShowOptions","pdftooltipId","useId","wordtooltipID","texttooltipID","hostStyles","initializeIcons","wordIcon","pdfIcon","txtIcon","Stack","ActionButton","TooltipHost","IconButton","Markdown","rehypeRaw","rehypeHighlight","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","resetImage","ClearChatButton","disabled","onClick","Tooltip","selectedMessageAtom","atom","QuestionInput","onSend","placeholder","clearOnSend","lastQuestionRef","clearchat","fileuploadelement","question","setQuestion","selectedMessage","setSelectedMessage","useRecoilState","sendQuestion","resetFunction","onEnterPress","ev","onQuestionChange","sendQuestionDisabled","resetDisabled","Send28Filled","UserChatMessage","message","handleButtonClick","UploadDocumentButton","IoMdAttach","FileUploadModal","open","fileNames","isEmbeddingsLoading","embeddingsLoaded","openAlert","openWarning","infoAlert","openDocClearAlert","handleCloseModal","handleSubmitFile","handleFileUpload","handleAlertClose","deleteEmbeddings","openSnackbar","snackbarMessage","handleSnackbarClose","Modal","Box","Typography","Button","Dismiss24Regular","Dropzone","getRootProps","getInputProps","AiOutlineFile","ArrowUpload24Regular","CheckmarkCircle24Filled","Divider","DeleteDismiss24Filled","Backdrop","theme","CircularProgress","Snackbar","Alert","Chat","isSideBarOpen","shouldStream","setShouldStream","isScreenSmall","setIsScreenSmall","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","chatMessageStreamEnd","isLoading","setIsLoading","setAnswerCompletion","setError","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","modelApproach","answers","setAnswers","sliderValue","setSliderValue","fileUploadPanelOpen","setFileUploadPanelOpen","setFileNames","files","setFiles","setIsEmbeddingsLoading","setEmbeddingsLoaded","setOpenAlert","setOpenDocClearAlert","openDocClearAlertforchat","setOpenDocClearAlertforchat","setWarning","stopGenerating","setStopGenerating","uploaded_files","setuploaded_files","openGuidlinesAlert","setOpenGuidlinesAlert","openFileUploadPanel","closeFileUploadPanel","uploadedFileNames","prevFileNames","setSnackbarMessage","setOpenSnackbar","setInfoAlert","uploadedFiles","allowedExtensions","prevFiles","clearPrompt","clearChat","embeddingInit","clearEmbeddings","deleteEmbeddingsforchat","text","stopGeneratingAnswer","makeApiRequest","request","a","askResponse","readNDJSONStream","latestResponse","setContentValue","setContent","reason","hasAccess","setHasAccess","makeAccessApiRequest","handleClick","selectedButton","setSelectedButton","buttonName","contentValue","isContent","handleResize","q","DefaultButton","FaStop","Text","AlertTitle","App","router","RouterProvider","ReactDOM"],"sources":["../../src/assets/Daiichi_Sankyo.png","../../src/components/Navbar/sidebar.tsx","../../src/components/GeneralHelp/GeneralHelp.tsx","../../src/api/api.ts","../../src/api/models.ts","../../src/ThemeContext.tsx","../../src/components/Switch/Switch.tsx","../../src/components/Navbar/navbar.tsx","../../src/components/NavSection/NavSection.tsx","../../src/pages/layout/Layout.tsx","../../src/components/Answer/AnswerParser.tsx","../../src/assets/Daiichi_Sankyo_junior.png","../../src/components/Answer/AnswerIcon.tsx","../../src/assets/NotoSansJP-Regular.ttf","../../src/components/Answer/Answer.tsx","../../src/components/Answer/AnswerLoading.tsx","../../src/components/Answer/AnswerError.tsx","../../src/assets/reset.png","../../src/components/ClearChatButton/ClearChatButton.tsx","../../src/components/UserChatMessage/Atom.tsx","../../src/components/QuestionInput/QuestionInput.tsx","../../src/components/UserChatMessage/UserChatMessage.tsx","../../src/components/UploadDocumentButton/UploadDocument.tsx","../../src/components/FileUpload/FileUpload.tsx","../../src/pages/AIchat/Chat.tsx","../../src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__04ff37b4__\"","import { TbHexagonLetterP } from \"react-icons/tb\";\r\nimport { MdSettingsSuggest } from \"react-icons/md\";\r\nimport { IoMdHelpCircleOutline } from \"react-icons/io\";\r\nimport { MdOutlineFeedback, MdLogout } from \"react-icons/md\";\r\nimport { BiUserCircle } from \"react-icons/bi\";\r\n// import { Switch } from '@fluentui/react';\r\n\r\ninterface SidebarItem {\r\n    title: string;\r\n    path?: string;\r\n    icon?: JSX.Element;\r\n    cName: string;\r\n    isSwitch?: boolean;\r\n}\r\n\r\nexport const SidebarData = (isDarkTheme: boolean): SidebarItem[] => [\r\n    {\r\n        title: \"username\",\r\n        icon: <BiUserCircle color=\"#333333\" />,\r\n        cName: \"nav-text\"\r\n    },\r\n    {\r\n        title: isDarkTheme ? \"Light Mode\" : \"Dark Mode\",\r\n        path: \"\",\r\n        cName: \"nav-text\",\r\n        isSwitch: true\r\n    },\r\n    {\r\n        title: \"Customize\",\r\n        icon: <MdSettingsSuggest color=\"#333333\" />,\r\n        cName: \"nav-text\"\r\n    },\r\n    {\r\n        title: \"Help\",\r\n        icon: <IoMdHelpCircleOutline color=\"#333333\" />,\r\n        cName: \"nav-text\"\r\n    },\r\n    {\r\n        title: \"Feedback\",\r\n        icon: <MdOutlineFeedback color=\"#333333\" />,\r\n        cName: \"nav-text\"\r\n    },\r\n    {\r\n        title: \"Logout\",\r\n        icon: <MdLogout color=\"#333333\" />,\r\n        cName: \"nav-text\"\r\n    }\r\n];\r\n","import React from \"react\";\r\nimport styles from \"./GeneralHelp.module.css\";\r\nimport { Separator } from \"@fluentui/react\";\r\nimport { BiItalic } from \"react-icons/bi\";\r\nconst GeneralHelp = () => {\r\n    const manualLink = \"https://sankyopharma.sharepoint.com/:b:/s/DSTeam_CoE_AIML/EVGrL14Oos1HmZBzF8kSbzwByLTmSe7KeCMGAzBdbYUJaQ?e=S2Gkn3\";\r\n    const chatdsi_user_manual = \"https://sankyopharma.sharepoint.com/:b:/s/DSTeam_CoE_AIML/EXXqQH0G_VlGmAj5TwwbeEQBn3KHvmo0iw8wQG_EsBXePg?e=GjPPIg\";\r\n    const chatdsi_usage_guidelines = \"https://sankyopharma.sharepoint.com/:b:/s/DSTeam_CoE_AIML/ETF4r68T6mtFvor7wgAhrLQBHh-g4dzaSzVvZNef3J4Uug?e=BPv32A\";\r\n    const app_support = \" mailto:appsupport_genai@dsi.com\";\r\n    const chatdsi_landing_page = \"https://my.dsi.com/web/parsippany-information-systems/chatdsi\";\r\n    const manualLink2 = \"\";\r\n    return (\r\n        <div>\r\n            <div>\r\n                <p className={styles.listItem}>\r\n                    Whether you have general questions or need help generating applicable content via ChatDSI we are here to assist you! On this page, we’ve\r\n                    provided a few tips for entering prompts to help get you started. To view the complete user manual and learn more about all of ChatDSI’s\r\n                    features, as well as access helpful FAQs and Use-Cases, please visit the{\" \"}\r\n                    <a href={chatdsi_landing_page} target=\"_blank\">\r\n                        ChatDSI Landing Page\r\n                    </a>{\" \"}\r\n                    on my.dsi.com. In addition, we highly recommend that you familiarize yourself with the -{\" \"}\r\n                    <a href={chatdsi_usage_guidelines} target=\"_blank\">\r\n                        ChatDSI Usage Guidelines.\r\n                    </a>{\" \"}\r\n                    To contact someone from our team for additional help, please send a message to -{\" \"}\r\n                    <a href={app_support} target=\"_blank\">\r\n                        mailto:appsupport_genai@dsi.com.\r\n                    </a>\r\n                    {/* <strong>mailto:appsupport_genai@dsi.com</strong>. */}\r\n                </p>\r\n                <h3>Prompt Tips</h3>\r\n                <p className={styles.listItem}>To make the most out of your interactions, we recommend following these prompt techniques and examples:</p>\r\n                <ol className={styles.listStyle}>\r\n                    <li className={styles.listItem}>\r\n                        <strong>Start with Question Keywords :</strong> Begin your prompt with question words like \"What,\" \"How,\" \"Why,\" \"When,\" or \"Where\" to\r\n                        induce a more informative answer. Example - Enter{\" \"}\r\n                        <span className={styles.exampleGood}>\"What are the common side effects of drug X?\"</span> instead of just{\" \"}\r\n                        <span className={styles.exampleBad}> \"Side effects of Drug X\"</span>\r\n                    </li>\r\n                    <li className={styles.listItem}>\r\n                        <strong>Use Complete Sentences :</strong> Frame your questions using complete sentences. This helps the model better understand the\r\n                        context and provide a more coherent response.\r\n                    </li>\r\n                    <li className={styles.listItem}>\r\n                        <strong>Ask for Pros and Cons :</strong> If relevant, ask for the pros and cons of a situation to get a more balanced response. Example:\r\n                        Ask -{\" \"}\r\n                        <span className={styles.exampleGood}>\r\n                            \"What are the benefits and drawbacks of using open-source software in an enterprise setting?\"\r\n                        </span>{\" \"}\r\n                        instead of <span className={styles.exampleBad}>\"Is open-source software better than proprietary software?\"</span>\r\n                    </li>\r\n                    <li className={styles.listItem}>\r\n                        <strong>Ask for an Explanation :</strong> If you want a detailed explanation, consider using phrases like \"Can you explain…\" or \"Tell me\r\n                        more about.\" Example -\r\n                        <span className={styles.exampleGood}> \"Can you explain the concept of DevOps and its significance in software development?\"</span>{\" \"}\r\n                        instead of <span className={styles.exampleBad}>\"What is DevOps?\"</span>\r\n                    </li>\r\n                    <li className={styles.listItem}>\r\n                        <strong>Experiment and Reframe : </strong>\r\n                        If you're not getting the desired answer, try reframing your question or experimenting with different phrasings.\r\n                    </li>\r\n                </ol>\r\n                {/* <h2>Configuring ChatDSI for a Specific Purpose</h2> */}\r\n                <p className={styles.listItem}>\r\n                    {\" \"}\r\n                    To further refine how ChatDSI responds, use the <i>Customize feature found under <strong>left pane</strong>.</i>\r\n                    The benefit of this feature is that it enables you to configure or customize the tool so that it responds in a certain way. In other words,\r\n                    you can tailor the chat experience so that the tool acts in a way that serves a more precise but temporary need, e.g., turning it into a\r\n                    personal translator for a specific language or a coding assistant. See the user manual for instructions on this feature.\r\n                </p>\r\n                <p className={styles.listItem}>\r\n                    {\" \"}\r\n                    Remember, content generated by ChatDSI may be incorrect and should not be relied upon for critical or sensitive matters without thorough\r\n                    vetting as described in the{\" \"}\r\n                    <a href={chatdsi_usage_guidelines} target=\"_blank\">\r\n                        Usage Guidelines.\r\n                    </a>{\" \"}\r\n                    For any feedback or questions, don't hesitate to reach out to our support team at the email address above.\r\n                </p>\r\n                <p className={styles.listItem}> Happy exploring and learning! </p>\r\n\r\n                {/*  */}\r\n                <Separator />\r\n                {/* <p className={styles.listItem}>\r\n                    For the full user manual visit -{\" \"}\r\n                    <a href={manualLink} target=\"_blank\">\r\n                        User manual\r\n                    </a>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneralHelp;\r\n","import { AskRequest, AskResponse, ChatRequest, Access, FileUpload } from \"./models\";\r\n\r\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/ask\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            question: options.question,\r\n            approach: options.approach,\r\n            overrides: {\r\n                retrieval_mode: options.overrides?.retrievalMode,\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function accessApi(): Promise<Access> {\r\n    const response = await fetch(\"/api/auth\", {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    const parsedResponse: Access = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n    return parsedResponse;\r\n}\r\n\r\n// export async function logoutApi(data: string): Promise<Response> {\r\nexport async function logoutApi(): Promise<Response> {\r\n    const url = \"/api/logout\";\r\n    // const data = { message: \"This is a log message from Flask!\" };\r\n\r\n    const outputResponse = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        // body: JSON.stringify(data),\r\n        credentials: \"include\" //include cookies in the request\r\n    });\r\n    // .then(response => response.json())\r\n    // .then(result => {\r\n    //     console.log(\"Server response:\", result);\r\n    // })\r\n\r\n    return outputResponse;\r\n}\r\n\r\nexport async function chatApi(options: ChatRequest): Promise<Response> {\r\n    const url = options.shouldStream ? \"/chat_stream\" : \"/chat\";\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            history: options.history,\r\n            approach: options.approach,\r\n            overrides: {\r\n                retrieval_mode: options.overrides?.retrievalMode,\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory,\r\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions,\r\n                model_type: options.overrides?.modelType\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `/content/${citation}`;\r\n}\r\n\r\nexport async function uploadApi(options: FileUpload): Promise<AskResponse> {\r\n    const formData = new FormData();\r\n\r\n    // Append each file to the formData\r\n    options.files.forEach((file, index) => {\r\n        formData.append(`file${index + 1}`, file);\r\n    });\r\n\r\n    const response = await fetch(\"/upload\", {\r\n        method: \"POST\",\r\n        body: formData\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 599) {\r\n        throw Error(\"try_after_some_time\");\r\n    } else if (response.status > 499) {\r\n        throw Error(\"file_size_error\");\r\n    } else if (response.status > 399) {\r\n        throw Error(\"csv_excel_error\");\r\n    } else if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    } else if (response.status > 250) {\r\n        throw Error(\"unstructured_data_already_uploaded\");\r\n    } else if (response.status > 200) {\r\n        throw Error(\"csv_excel_already_present_error\");\r\n    }\r\n    return parsedResponse;\r\n}\r\n","export const enum Approaches {\r\n    General = \"general\",\r\n    DocumentQNA = \"docqna\"\r\n}\r\n\r\nexport const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport type AskRequestOverrides = {\r\n    modelType?: string;\r\n    retrievalMode?: RetrievalMode;\r\n    semanticRanker?: boolean;\r\n    semanticCaptions?: boolean;\r\n    excludeCategory?: string;\r\n    top?: number;\r\n    temperature?: number;\r\n    promptTemplate?: string;\r\n    promptTemplatePrefix?: string;\r\n    promptTemplateSuffix?: string;\r\n    suggestFollowupQuestions?: boolean;\r\n};\r\n\r\nexport type AskRequest = {\r\n    question: string;\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type AskResponse = {\r\n    status: string;\r\n    answer: string;\r\n    thoughts: string | null;\r\n    data_points: string[];\r\n    error?: string;\r\n};\r\n\r\nexport type ChatTurn = {\r\n    user: string;\r\n    bot?: string;\r\n};\r\n\r\nexport type ChatRequest = {\r\n    history: ChatTurn[];\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n    shouldStream?: boolean;\r\n};\r\n\r\nexport type Access = {\r\n    error?: string;\r\n    hasModAccess: boolean;\r\n};\r\n\r\nexport type FileUpload = {\r\n    files: File[];    \r\n};\r\n\r\nexport type FileUploadResponse = {\r\n    status: string;\r\n    error?: string;\r\n};\r\n","import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface ThemeContextProps {\r\n    isDarkTheme: boolean;\r\n    toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextProps | undefined>(undefined);\r\n\r\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\r\n    const [isDarkTheme, setIsDarkTheme] = useState(false);\r\n\r\n    const toggleTheme = () => {\r\n        setIsDarkTheme(prevTheme => !prevTheme);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const className = isDarkTheme ? 'dark-theme' : 'bright-theme';\r\n        document.body.classList.remove('dark-theme', 'bright-theme');\r\n        document.body.classList.add(className);\r\n    }, [isDarkTheme]);\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ isDarkTheme, toggleTheme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useTheme = (): ThemeContextProps => {\r\n    const context = useContext(ThemeContext);\r\n    if (context === undefined) {\r\n        throw new Error('useTheme must be used within a ThemeProvider');\r\n    }\r\n    return context;\r\n};\r\n","import React from 'react';\r\nimport './switch.css';\r\n\r\ninterface SwitchProps {\r\n  checked: boolean;\r\n  onChange: () => void;\r\n}\r\n\r\nconst Switch: React.FC<SwitchProps> = ({ checked, onChange }) => {\r\n  return (\r\n    <label className=\"switch\">\r\n      <input type=\"checkbox\" checked={checked} onChange={onChange} />\r\n      <span className=\"slider\"></span>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as IoIcons from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { SidebarData } from \"./sidebar\";\r\nimport \"./navbar.css\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { useBoolean } from \"@fluentui/react-hooks\";\r\nimport GeneralHelp from \"../../components/GeneralHelp/GeneralHelp\";\r\nimport { logoutApi } from \"../../api\";\r\nimport { TextField, Dialog, DialogType, PrimaryButton, DialogFooter } from \"@fluentui/react\";\r\nimport { createHashRouter } from \"react-router-dom\";\r\nimport { useTheme } from \"../../ThemeContext\";\r\nimport Switch from \"../../components/Switch/Switch\";\r\n\r\nconst getStyles = () => ({\r\n    main: [\r\n        {\r\n            selectors: {\r\n                [\"@media (min-width: 720px)\"]: {\r\n                    maxHeight: \"90%\",\r\n                    minWidth: \"800px\",\r\n                    maxWidth: \"900px\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n});\r\nconst getStyles1 = () => ({\r\n    main: [\r\n        {\r\n            borderRadius: \"15px\",\r\n            selectors: {\r\n                [\"@media (min-width: 720px)\"]: {\r\n                    maxHeight: \"80%\",\r\n                    minWidth: \"500px\",\r\n                    maxWidth: \"600px\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n});\r\n\r\ninterface NavbarProps {\r\n    toggleNavbar: () => void;\r\n    onParameters: () => void;\r\n    setIsSidebarOpen: (isSidebarOpen: boolean) => void; // to pass the boolean value back to heirarchy\r\n    isSidebarOpen: boolean;\r\n    promptTemplate: string;\r\n    setPromptTemplate: (promptTemplate: string) => void;\r\n}\r\n\r\nconst Navbar = ({ onParameters, isSidebarOpen, setIsSidebarOpen, promptTemplate, setPromptTemplate }: NavbarProps) => {\r\n    const [isOpen, { setTrue: openHelpWindow, setFalse: dismissHelpWindow }] = useBoolean(false);\r\n    const [sidebar, setSidebar] = useState<boolean>(false);\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const promptHasChanged = useRef<boolean>(false);\r\n    const [userName, setUserName] = useState<string>(\"user.name\");\r\n    const { isDarkTheme, toggleTheme } = useTheme();\r\n    const navbarRef = useRef<HTMLDivElement>(null);\r\n\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n        if (navbarRef.current && !navbarRef.current.contains(event.target as Node)) {\r\n            setIsSidebarOpen(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [navbarRef]);\r\n\r\n    function getCookie(name: string) {\r\n        const cookies = document.cookie.split(\";\");\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            if (cookie.startsWith(name + \"=\")) {\r\n                return cookie.substring(name.length + 1);\r\n            }\r\n        }\r\n        return \"user.name\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        const name = getCookie(\"username\");\r\n        const decodedName = decodeURIComponent(name.replace(/^\"(.*)\"$/, \"$1\").replace(/\\\\054/g, \",\"));\r\n        console.log(decodedName);\r\n\r\n        setUserName(decodedName);\r\n    }, []);\r\n\r\n    const closeConfigPanel = () => {\r\n        setIsConfigPanelOpen(false);\r\n        if (promptHasChanged.current == true) {\r\n            clearChat();\r\n            promptHasChanged.current = false;\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        // lastQuestionRef.current = \"\";\r\n        // error && setError(undefined);\r\n        // setActiveCitation(undefined);\r\n        // setActiveAnalysisPanelTab(undefined);\r\n        // setAnswers([]);\r\n    };\r\n\r\n    const clearPrompt = () => {\r\n        setPromptTemplate(\"\");\r\n        clearChat();\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n        promptHasChanged.current = true;\r\n    };\r\n\r\n    const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false);\r\n    const modalPropsStyles = { type: DialogType.normal, main: { maxWidth: 2000 } };\r\n    const modalProps = React.useMemo(\r\n        () => ({\r\n            isBlocking: true,\r\n            // title: \"Customize ChatDSI\",\r\n            styles: modalPropsStyles\r\n            //  dragOptions: isDraggable ? dragOptions : undefined\r\n        }),\r\n\r\n        [isDraggable]\r\n    );\r\n\r\n    const showSidebar = (): void => {\r\n        console.log(\"before\", isSidebarOpen);\r\n        setIsSidebarOpen(!isSidebarOpen);\r\n        console.log(\"after\", isSidebarOpen);\r\n    };\r\n\r\n    const handleHelpClick = (e: React.MouseEvent) => {\r\n        e.preventDefault();\r\n        openHelpWindow();\r\n    };\r\n\r\n    // Define the router configuration\r\n    const router = createHashRouter([\r\n        {\r\n            path: \"/\",\r\n            lazy: () => import(\"../../pages/NoPage\")\r\n        }\r\n    ]);\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            const response = await logoutApi();\r\n            const data = await response.json();\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.log(\"Failed to logout:\", errorText);\r\n                console.error(\"Failed to logout:\", errorText);\r\n                alert(\"Failed to logout: \" + errorText);\r\n                // return;\r\n            }\r\n\r\n            // console.log(data, \"data output\");\r\n            console.log(response.status, \"response.status\");\r\n            // console.log(response.text(), \"response text\");\r\n            // console.log(response.json(), \"response json\");\r\n            console.log(response, \"response\");\r\n            if (response.ok) {\r\n                // Assuming the backend will return a success message or status\r\n\r\n                alert(\r\n                    decodeURIComponent(\r\n                        getCookie(\"username\")\r\n                            .replace(/^\"(.*)\"$/, \"$1\")\r\n                            .replace(/\\\\054/g, \",\")\r\n                    ) + \" logged out successfully\"\r\n                );\r\n                console.log(\"Logged out from frontend\");\r\n                window.location.replace(data.auth_url);\r\n            } else {\r\n                console.log(\"Response not ok and failed to logout\");\r\n                console.error(\"Failed to logout\");\r\n            }\r\n        } catch (error) {\r\n            console.log(\"error and failed to logout\", error);\r\n            console.error(\"An error occurred during logout\", error);\r\n        }\r\n    };\r\n\r\n    const dragOptions = {\r\n        moveMenuItemText: \"Move\",\r\n        closeMenuItemText: \"Close\"\r\n    };\r\n\r\n    const handleFeedbackClick = () => {\r\n        window.open(\r\n            \"https://forms.office.com/Pages/ResponsePage.aspx?id=h5QXsCYw90S81iXtRSE40Cg1HtlUAJ5AviIohVLonMhUOFhCSzZSNjRBQ1VZTlhNU09HOVhRRTdDQy4u\",\r\n            \"_blank\"\r\n        );\r\n    };\r\n\r\n    const sidebarItems = SidebarData(isDarkTheme);\r\n\r\n    return (\r\n        <div ref={navbarRef}>\r\n            <IconContext.Provider value={{ color: \"#fff\" }}>\r\n                <div className={`navbar ${isDarkTheme ? \"dark-theme\" : \"bright-theme\"}`}>\r\n                    <button className=\"menu-bars no-border\" onClick={showSidebar}>\r\n                        <IoIcons.IoMdMenu style={{ color: isDarkTheme ? \"white\" : \"black\" }} />\r\n                    </button>\r\n                </div>\r\n                <nav className={`nav-menu ${isSidebarOpen ? \"active\" : \"\"} ${isDarkTheme ? \"dark-theme\" : \"bright-theme\"}`}>\r\n                    <ul className={\"nav-menu-items\"}>\r\n                        {sidebarItems.map((item, index) => (\r\n                            <li key={index} className={item.cName}>\r\n                                {item.path ? (\r\n                                    <Link to={item.path}>\r\n                                        <div>\r\n                                            <div className=\"navbar-icons\">{item.icon}</div>\r\n                                            <span className=\"navtextSpan\">{item.title}</span>\r\n                                        </div>\r\n                                        <span>{\">\"}</span>\r\n                                    </Link>\r\n                                ) : item.title === \"Help\" ? (\r\n                                    <div onClick={handleHelpClick} className=\"nav-text-clickable\">\r\n                                        <div className=\"navbar-icons\">{item.icon}</div>\r\n                                        <span className=\"navtextSpan\">{item.title}</span>\r\n                                    </div>\r\n                                ) : item.title === \"Feedback\" ? (\r\n                                    <div onClick={handleFeedbackClick} className=\"nav-text-clickable \">\r\n                                        <div className=\"navbar-icons\">{item.icon}</div>\r\n                                        <span className=\"navtextSpan\">{item.title}</span>\r\n                                    </div>\r\n                                ) : item.title === \"Customize\" ? (\r\n                                    <div onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} className=\"nav-text-clickable \">\r\n                                        <div className=\"navbar-icons\">{item.icon}</div>\r\n                                        <span className=\"navtextSpan\">{item.title}</span>\r\n                                    </div>\r\n                                ) : item.title === \"Logout\" ? (\r\n                                    <div onClick={handleLogout}>\r\n                                        <div className=\"navbar-icons\">{item.icon}</div>\r\n                                        <span className=\"navtextSpan\"> {item.title}</span>\r\n                                    </div>\r\n                                ) : item.title === \"username\" ? (\r\n                                    <div>\r\n                                        <div className=\"navbar-icons\">{item.icon}</div>\r\n                                        <span className=\"navtextSpan\">{userName}</span>\r\n                                    </div>\r\n                                ) : item.isSwitch ? (\r\n                                    <div>\r\n                                        <Switch checked={isDarkTheme} onChange={toggleTheme} />\r\n                                        <span className=\"theme-text navtextSpan\">{isDarkTheme ? \"Dark Mode\" : \"Light Mode\"}</span>\r\n                                    </div>\r\n                                ) : (\r\n                                    <>\r\n                                        {/* {getCookie(\"username\")} */}\r\n                                        <div className=\"navbar-icons\">{item.icon}</div>\r\n                                        <span className=\"navtextSpan\">{item.title}</span>\r\n                                    </>\r\n                                )}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </nav>\r\n                <Dialog\r\n                    hidden={!isOpen}\r\n                    onDismiss={dismissHelpWindow}\r\n                    modalProps={modalProps}\r\n                    dialogContentProps={{\r\n                        title: \"ChatDSI Helper\",\r\n                        closeButtonAriaLabel: \"Close\"\r\n                    }}\r\n                    styles={getStyles}\r\n                >\r\n                    <GeneralHelp />\r\n                </Dialog>\r\n                <div className=\"customizeChatDSI\">\r\n                    <Dialog\r\n                        dialogContentProps={{\r\n                            title: \"Customize ChatDSI's Behavior\",\r\n                            closeButtonAriaLabel: \"Save\"\r\n                        }}\r\n                        modalProps={modalProps}\r\n                        hidden={!isConfigPanelOpen}\r\n                        // isBlocking={false}\r\n                        onDismiss={() => setIsConfigPanelOpen(false)}\r\n                        styles={getStyles1}\r\n                    >\r\n                        <DialogFooter>\r\n                            <PrimaryButton className=\"saveConfigPanel\" onClick={closeConfigPanel} text=\"Save\" />\r\n                        </DialogFooter>\r\n\r\n                        <hr style={{ margin: \"0px 0\", color: \"red\" }} />\r\n                        <div className=\"parameterstext1\">\r\n                            Customize your chat experience by assigning roles to ChatDSI that meet specific needs. For example, in the Custom Prompt field\r\n                            below, instruct ChatDSI to function as a proficient French translator or as a Python coding assistant or other unique roles.\r\n                        </div>\r\n                        <TextField\r\n                            defaultValue={promptTemplate}\r\n                            label=\"Custom Prompt\"\r\n                            multiline\r\n                            rows={5}\r\n                            autoAdjustHeight\r\n                            onChange={onPromptTemplateChange}\r\n                            className=\"chatPromptTemplate\"\r\n                            placeholder=\"Tell ChatDSI to take on a specific role and respond to all queries in that manner.\"\r\n                        />\r\n\r\n                        <div className=\"parameterstext2\">\r\n                            When you hit save, this will override ChatDSI's usual behavior, and it will only function as instructed until the prompt is cleared\r\n                            via the \"Clear Prompt\" link that will appear above the prompt bar. More on this feature can be found in the user manual.\r\n                        </div>\r\n                    </Dialog>\r\n                </div>\r\n            </IconContext.Provider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport github from \"../../assets/github.svg\";\r\nimport logo from \"../../assets/Daiichi_Sankyo.png\";\r\nimport styles from \"./NavSection.module.css\";\r\nimport { BiUserCircle } from \"react-icons/bi\";\r\nimport Navbar from \"../Navbar/navbar\";\r\nimport { useTheme } from '../../ThemeContext';\r\n \r\ninterface Props {\r\n    pageTitle: string;\r\n    pageSubTitle: string;\r\n    setIsSidebarOpen: (isSidebarOpen: boolean) => void;\r\n    isSidebarOpen: boolean;\r\n    promptTemplate: string;\r\n    setPromptTemplate: (promptTemplate: string) => void;\r\n}\r\n \r\nconst NavSection = ({ pageTitle, pageSubTitle, isSidebarOpen, setIsSidebarOpen, promptTemplate, setPromptTemplate }: Props) => {\r\n    const [userName, setUserName] = useState<string>(\"user.name\");\r\n    const { isDarkTheme } = useTheme();\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n \r\n    function getCookie(name: string) {\r\n        const cookies = document.cookie.split(\";\");\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            if (cookie.startsWith(name + \"=\")) {\r\n                return cookie.substring(name.length + 1);\r\n            }\r\n        }\r\n        return \"user.name\";\r\n    }\r\n \r\n    useEffect(() => {\r\n        const name = getCookie(\"username\");\r\n        const decodedName = decodeURIComponent(name.replace(/^\"(.*)\"$/, \"$1\").replace(/\\\\054/g, \",\"));\r\n        console.log(decodedName);\r\n \r\n        setUserName(decodedName);\r\n    }, []);\r\n \r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={`${styles.header} ${isDarkTheme ? styles.dark : styles.bright}`} role={\"banner\"}>\r\n                <Navbar\r\n                    isSidebarOpen={isSidebarOpen}\r\n                    setIsSidebarOpen={setIsSidebarOpen}\r\n                    onParameters={() => setIsConfigPanelOpen(!isConfigPanelOpen)}\r\n                    toggleNavbar={function (): void {\r\n                        throw new Error(\"Function not implemented.\");\r\n                    }}\r\n                    promptTemplate={promptTemplate}\r\n                    setPromptTemplate={setPromptTemplate}\r\n                />\r\n                <div className={styles.headerContainer}>\r\n                <Link to=\"/\" className={styles.logoContainer}>\r\n                        <img src={logo} alt=\"Daiichi Sankyo logo\"\r\n                            style={{\r\n                                filter: isDarkTheme ? 'brightness(2)' : 'brightness(1)'\r\n                            }}\r\n                        />\r\n                    </Link>\r\n                    <div className={styles.titleContainer}>\r\n                        <h3 className={styles.headerTitle} style={{ color: isDarkTheme ? 'white' : 'black' }}>{pageTitle}</h3>\r\n                        <h5 className={styles.headerSubtitle} style={{ color: isDarkTheme ? 'rgb(232, 228, 228)' : 'rgb(188, 182, 182)' }}>{pageSubTitle}</h5>\r\n                    </div>\r\n                    <div className={styles.userContainer}>\r\n                        <h4 className={styles.headerRightText}\r\n                        style={{ color: isDarkTheme ? 'white' : 'black' }}\r\n                        >\r\n                            {/* {userName} */}\r\n                            {\"\"}\r\n                        </h4>\r\n                        {\"\"}\r\n                        {/* <BiUserCircle fontSize=\"25px\"\r\n                        style={{ color: isDarkTheme ? 'white' : 'black' }} /> */}\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n \r\nexport default NavSection;\r\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\r\nimport github from \"../../assets/github.svg\";\r\nimport styles from \"./Layout.module.css\";\r\nimport NavSection from \"../../components/NavSection/NavSection\";\r\nimport { RecoilRoot } from \"recoil\";\r\n\r\ninterface LayoutProps {\r\n    isSidebarOpen: boolean;\r\n    setIsSidebarOpen: (isSidebarOpen: boolean) => void;\r\n    promptTemplate: string;\r\n    setPromptTemplate: (promptTemplate: string) => void;\r\n}\r\n\r\nconst Layout = ({ setIsSidebarOpen, isSidebarOpen, setPromptTemplate, promptTemplate }: LayoutProps) => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <RecoilRoot>\r\n                <header className={styles.header} role={\"banner\"}>\r\n                    <NavSection\r\n                        isSidebarOpen={isSidebarOpen}\r\n                        setIsSidebarOpen={setIsSidebarOpen}\r\n                        pageTitle=\"ChatDSI\"\r\n                        pageSubTitle=\"Powered by GPT-4o\"\r\n                        promptTemplate={promptTemplate}\r\n                        setPromptTemplate={setPromptTemplate}\r\n                    />\r\n                </header>\r\n\r\n                <Outlet />\r\n            </RecoilRoot>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    followupQuestions: string[];\r\n    codeContent: string;\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n    const followupQuestions: string[] = [];\r\n\r\n    // Extract any follow-up questions that might be in the answer\r\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\r\n        followupQuestions.push(content);\r\n        return \"\";\r\n    });\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    parsedAnswer = parsedAnswer.trim();\r\n\r\n    const regex = /```([^`]+)```/g;\r\n    const matches = [];\r\n    let match;\r\n\r\n    while ((match = regex.exec(parsedAnswer)) !== null) {\r\n        const codeSnippet = match[1].trim();\r\n        matches.push(codeSnippet);\r\n    }\r\n\r\n    // parsedAnswer = parsedAnswer.replace(\r\n    //     regex,\r\n    //     \"<div style='background-color: black; padding: 20px;border-radius: 10px;'><code style='color: white; font-size: 16px;'>$1</code></div>\"\r\n    // );\r\n\r\n    return {\r\n        answerHtml: parsedAnswer,\r\n        followupQuestions,\r\n        codeContent: matches.join(\"\")\r\n    };\r\n}\r\n","export default \"__VITE_ASSET__47eb769b__\"","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\nimport logo from \"../../assets/Daiichi_Sankyo_junior.png\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <img src={logo} alt=\"Daiichi Sankyo logo\" max-height=\"25px\" height=\"20px\" max-width=\"20px\" width=\"20px\"/>;\r\n};\r\n","export default \"__VITE_ASSET__35b9ffd2__\"","import { useMemo } from \"react\";\r\nimport { Stack, ActionButton } from \"@fluentui/react\";\r\nimport { IIconProps, initializeIcons } from \"@fluentui/react\";\r\nimport { TooltipHost, ITooltipHostStyles } from \"@fluentui/react/lib/Tooltip\";\r\nimport { IconButton } from \"@fluentui/react/lib/Button\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport DOMPurify from \"dompurify\";\r\nimport styles from \"./Answer.module.css\";\r\nimport { AskResponse } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nimport rehypeHighlight from \"rehype-highlight\";\r\nimport Markdown from \"react-markdown\";\r\nimport \"highlight.js/styles/github-dark.css\";\r\nimport { useState } from \"react\";\r\nimport { saveAs } from \"file-saver\"; // For saving files\r\nimport { Document, Packer, Paragraph, TextRun } from \"docx\";\r\nimport jsPDF from \"jspdf\";\r\nimport japaneseFontFamily from \"../../assets/NotoSansJP-Regular.ttf\";\r\n// import { Dropdown } from \"@fluentui/react\";\r\n\r\n// UserChatMessage Component\r\n\r\n// Answer Component\r\ninterface Props {\r\n    answer: AskResponse;\r\n    onFollowupQuestionClicked: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n    isAnswerCompleted?: boolean;\r\n    regenerateResponse?: boolean;\r\n    regenerateQuestion: string;\r\n}\r\n\r\nexport const Answer = ({ answer, onFollowupQuestionClicked, showFollowupQuestions, isAnswerCompleted, regenerateResponse, regenerateQuestion }: Props) => {\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer), [answer]);\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    const handleExportTXT = () => {\r\n        const txtBlob = new Blob([parsedAnswer.answerHtml], { type: \"text/plain;charset=utf-8\" });\r\n        saveAs(txtBlob, \"response.txt\");\r\n    };\r\n\r\n    const handleExportPDF = async () => {\r\n        const doc = new jsPDF();\r\n        const margin = 20; // Set your desired margin value\r\n        const topMargin = margin; // Adjust this value to set the top margin\r\n        const bottomMargin = margin; // Adjust this value to set the bottom margin\r\n        let cursorY = topMargin;\r\n        let remainingText = parsedAnswer.answerHtml;\r\n        const lineHeight = 6; // Assuming a line height of 12 units (adjust as needed)\r\n        const availableHeight = doc.internal.pageSize.height - topMargin - bottomMargin;\r\n\r\n        const fontSize = 12; // Set your desired smaller font size\r\n        doc.setFontSize(fontSize);\r\n\r\n        const fontUrl = japaneseFontFamily;\r\n\r\n        // Fetch the TTF font file as an ArrayBuffer\r\n        const fontBytes = await fetch(fontUrl).then(res => res.arrayBuffer());\r\n\r\n        // Convert the ArrayBuffer to a Base64 string\r\n        const base64String = btoa(new Uint8Array(fontBytes).reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\r\n\r\n        doc.addFileToVFS(\"NotoSansJP-Regular.ttf\", base64String);\r\n        doc.addFont(\"NotoSansJP-Regular.ttf\", \"NotoSansJP\", \"normal\");\r\n\r\n        doc.setFont(\"NotoSansJP\");\r\n\r\n        const addNewPage = () => {\r\n            doc.addPage();\r\n            cursorY = topMargin;\r\n        };\r\n\r\n        const lines = doc.splitTextToSize(remainingText, doc.internal.pageSize.width - 2 * margin);\r\n\r\n        lines.forEach((line: string) => {\r\n            if (cursorY + lineHeight > availableHeight) {\r\n                addNewPage();\r\n            }\r\n\r\n            doc.text(line, margin, cursorY);\r\n            cursorY += lineHeight;\r\n        });\r\n\r\n        doc.save(\"response.pdf\");\r\n    };\r\n\r\n    const preprocessHTML = (html: string): string => {\r\n        const processedHtml = html.replace(/\\n/g, \"<br>\");\r\n        return processedHtml;\r\n    };\r\n\r\n    const handleExportDOCX = async () => {\r\n        const processedHtml = preprocessHTML(parsedAnswer.answerHtml);\r\n        const tempElement = document.createElement(\"div\");\r\n        tempElement.innerHTML = processedHtml;\r\n\r\n        // Extract text content\r\n        const paragraphs = Array.from(tempElement.childNodes).map(node => {\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n                return new Paragraph({\r\n                    children: [new TextRun(node.textContent || \"\")]\r\n                });\r\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n                const element = node as HTMLElement;\r\n                const textRuns = Array.from(element.childNodes).map(childNode => {\r\n                    if (childNode.nodeType === Node.TEXT_NODE) {\r\n                        return new TextRun(childNode.textContent || \"\");\r\n                    } else if (childNode.nodeType === Node.ELEMENT_NODE) {\r\n                        const childElement = childNode as HTMLElement;\r\n                        return new TextRun(childElement.innerText);\r\n                    } else {\r\n                        return new TextRun(\"\");\r\n                    }\r\n                });\r\n                return new Paragraph({\r\n                    children: textRuns\r\n                });\r\n            } else {\r\n                return new Paragraph({\r\n                    children: [new TextRun(\"\")]\r\n                });\r\n            }\r\n        });\r\n\r\n        // Create document\r\n        const doc = new Document({\r\n            sections: [\r\n                {\r\n                    properties: {},\r\n                    children: paragraphs\r\n                }\r\n            ]\r\n        });\r\n\r\n        // Generate blob\r\n        const blob = await Packer.toBlob(doc);\r\n\r\n        saveAs(blob, \"response.docx\");\r\n    };\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [exportFormat, setExportFormat] = useState<string | undefined>(undefined);\r\n\r\n    const handleExportChange = (event: React.FormEvent<HTMLDivElement>, option?: { key: string }) => {\r\n        if (option) {\r\n            setExportFormat(option.key);\r\n            switch (option.key) {\r\n                case \"pdf\":\r\n                    handleExportPDF();\r\n                    break;\r\n                case \"txt\":\r\n                    handleExportTXT();\r\n                    break;\r\n                case \"docx\":\r\n                    handleExportDOCX();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const exportOptions = [\r\n        { key: \"pdf\", text: \"PDF\" },\r\n        { key: \"txt\", text: \"TXT\" },\r\n        { key: \"docx\", text: \"DOCX\" }\r\n    ];\r\n\r\n    const pdftooltipId = useId(\"tooltip_pdf\");\r\n    const wordtooltipID = useId(\"tooltip_word\");\r\n    const texttooltipID = useId(\"tooltip_txt\");\r\n\r\n    const calloutProps = {\r\n        gapSpace: 0,\r\n        styles: {\r\n            beak: { background: \"white\" },\r\n            beakCurtain: { background: \"#c2c2d6\" },\r\n            calloutMain: { background: \"white\" }\r\n        }\r\n    };\r\n    const hostStyles: Partial<ITooltipHostStyles> = {\r\n        root: {\r\n            display: \"inline-block\"\r\n            // , background: \"rgb(255, 255, 128)\"\r\n        }\r\n    };\r\n    initializeIcons();\r\n\r\n    const wordIcon: IIconProps = { iconName: \"WordDocument\" };\r\n    const pdfIcon: IIconProps = { iconName: \"PDF\" };\r\n    const txtIcon: IIconProps = { iconName: \"TextDocument\" };\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    {!isAnswerCompleted && (\r\n                        <>\r\n                            <Stack horizontal>\r\n                                <ActionButton\r\n                                    style={{ color: \"black\" }}\r\n                                    iconProps={regenerateResponse ? { iconName: \"Refresh\" } : { iconName: \"\" }}\r\n                                    title=\"Regenerate\"\r\n                                    ariaLabel=\"Refresh\"\r\n                                    onClick={() => onFollowupQuestionClicked(regenerateQuestion)}\r\n                                    disabled={regenerateResponse ? false : true}\r\n                                ></ActionButton>\r\n                                <ActionButton\r\n                                    style={{ color: \"black\" }}\r\n                                    iconProps={{ iconName: \"Copy\" }}\r\n                                    title=\"Copy to clipboard\"\r\n                                    ariaLabel=\"Copy Code content\"\r\n                                    onClick={() => {\r\n                                        navigator.clipboard.writeText(parsedAnswer.answerHtml);\r\n                                    }}\r\n                                    disabled={isAnswerCompleted ? true : false}\r\n                                ></ActionButton>\r\n                                <ActionButton\r\n                                    style={{ color: \"black\" }}\r\n                                    iconProps={{ iconName: \"Download\" }}\r\n                                    title=\"Export\"\r\n                                    onClick={() => setShowOptions(!showOptions)}\r\n                                ></ActionButton>\r\n                                {showOptions && (\r\n                                    <Stack horizontal tokens={{ childrenGap: 10 }}>\r\n                                        <TooltipHost content=\"PDF\" id={pdftooltipId} styles={hostStyles}>\r\n                                            {/* // calloutProps={calloutProps} */}\r\n                                            <div>\r\n                                                <IconButton\r\n                                                    style={{\r\n                                                        color: \"red\"\r\n                                                    }}\r\n                                                    onClick={handleExportPDF}\r\n                                                    iconProps={pdfIcon}\r\n                                                    // title=\"PDF\"\r\n                                                ></IconButton>\r\n                                            </div>\r\n                                        </TooltipHost>\r\n                                        <TooltipHost content=\"TXT\" id={texttooltipID} styles={hostStyles}>\r\n                                            <div>\r\n                                                <IconButton\r\n                                                    style={{\r\n                                                        color: \"black\"\r\n                                                    }}\r\n                                                    onClick={handleExportTXT}\r\n                                                    iconProps={txtIcon}\r\n                                                    // title=\"TXT\"\r\n                                                ></IconButton>\r\n                                            </div>\r\n                                        </TooltipHost>\r\n                                        <TooltipHost content=\"DOCX\" id={wordtooltipID} styles={hostStyles}>\r\n                                            <div>\r\n                                                <IconButton\r\n                                                    style={{\r\n                                                        color: \"blue\"\r\n                                                    }}\r\n                                                    onClick={handleExportDOCX}\r\n                                                    iconProps={wordIcon}\r\n                                                    // title=\"DOCX\"\r\n                                                ></IconButton>\r\n                                            </div>\r\n                                        </TooltipHost>\r\n                                    </Stack>\r\n                                )}\r\n                            </Stack>\r\n                        </>\r\n                    )}\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow className={`${styles.answerStackItem}`}>\r\n                <Markdown rehypePlugins={[rehypeRaw as any, rehypeHighlight]}>{parsedAnswer.answerHtml}</Markdown>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item className={`${styles.answerStackItem}`}>\r\n                    <Stack horizontal wrap className={`${styles.followupQuestionsList}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {parsedAnswer.followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        Generating answer\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","export default \"__VITE_ASSET__4a5d3e8c__\"","import styles from \"./ClearChatButton.module.css\";\r\nimport resetImage from \"../../assets/reset.png\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <>\r\n            <Tooltip title=\"Clear Chat\" placement=\"right\">\r\n                <div className={`${styles.container} ${className ?? \"\"} ${disabled && styles.disabled}`} onClick={onClick}>\r\n                    <div style={{ marginLeft: \"15px\", marginRight: \"5px\" }}>\r\n                        <img\r\n                            src={resetImage}\r\n                            alt=\"Reset\"\r\n                            className={styles.resetIcon}\r\n                            style={{ width: \"40px\", height: \"40px\" }} // Set the size here\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Tooltip>\r\n        </>\r\n    );\r\n};\r\n","import { atom } from \"recoil\";\r\n \r\nexport const selectedMessageAtom = atom<string>({\r\n    key: \"selectedMessage\",\r\n    default: \"\"\r\n});\r\n ","import { useState, useEffect } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\nimport { ClearChatButton } from \"../ClearChatButton/ClearChatButton\";\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { selectedMessageAtom } from \"../UserChatMessage/Atom\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n    clearchat: () => void;\r\n    isLoading: boolean;\r\n    lastQuestionRef: any;\r\n    fileuploadelement: any;\r\n    value: string;\r\n    isContent: boolean;\r\n    // stopAnswerGeneration: () => void;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, lastQuestionRef, clearchat, fileuploadelement }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const [selectedMessage, setSelectedMessage] = useRecoilState(selectedMessageAtom);\r\n\r\n    useEffect(() => {\r\n        if (selectedMessage) {\r\n            setQuestion(selectedMessage);\r\n        }\r\n    }, [selectedMessage]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n            setSelectedMessage(\"\"); // Clear the selected message\r\n        }\r\n    };\r\n\r\n    const resetFunction = () => {\r\n        // setisreset(true);\r\n        if (!disabled) {\r\n            clearchat();\r\n        }\r\n    };\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const sendQuestionDisabled = disabled || !question.trim();\r\n    const resetDisabled = !lastQuestionRef.current || disabled;\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            {!disabled ? (\r\n                <Tooltip title=\"File Upload\" placement=\"left\">\r\n                    {fileuploadelement}\r\n                </Tooltip>\r\n            ) : (\r\n                <>{fileuploadelement}</>\r\n            )}\r\n            {/* {value} value + {question} question + {isContent} isContent + {valueOverload} valueOverload */}\r\n            {/* {valueOverload} */}\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                // value={contentvalue}\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n                disabled={disabled ? true : false}\r\n                style={{ height: \"50px\", fontSize: \"11px\" }}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <div aria-label=\"Ask question button\" onClick={sendQuestion}>\r\n                    {/* {!disabled ? ( */}\r\n                    <Tooltip title=\"Submit\" placement=\"left\">\r\n                        <Send28Filled\r\n                            // primaryFill=\"rgba(115, 118, 225, 1)\"\r\n                            primaryFill=\"rgba(0, 180, 237, 0.6)\"\r\n                            className={`${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                            // className={`${sendPlaceHolderDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                        />\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                {\r\n                    // !disabled ?\r\n                    <ClearChatButton\r\n                        className={`${resetDisabled ? styles.questionInputSendButtonDisabled : styles.resetIcon}`}\r\n                        // className={styles.resetIcon}\r\n                        onClick={resetFunction}\r\n                        disabled={resetDisabled}\r\n                        // disabled={!lastQuestionRef.current || disabled}\r\n                    />\r\n                    // :\r\n                    // <></>\r\n                }\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","// src/components/UserChatMessage.tsx\r\nimport React, { useEffect } from \"react\";\r\nimport styles from \"./UserChatMessage.module.css\";\r\nimport { Stack, ActionButton } from \"@fluentui/react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { selectedMessageAtom } from \"../UserChatMessage/Atom\";\r\n\r\ninterface UserChatMessageProps {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage: React.FC<UserChatMessageProps> = ({ message }) => {\r\n    const [selectedMessage, setSelectedMessage] = useRecoilState(selectedMessageAtom);\r\n\r\n    const handleButtonClick = () => {\r\n        setSelectedMessage(message);\r\n    };\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer}`} verticalAlign=\"space-between\">\r\n            <div className={styles.container}>\r\n                <div className={styles.message}>\r\n                    <ActionButton\r\n                        style={{ color: \"black\", paddingRight: \"15px\", margin: \"auto\" }}\r\n                        iconProps={{ iconName: \"Edit\" }}\r\n                        title=\"Edit Message\"\r\n                        onClick={handleButtonClick}\r\n                    />\r\n                    <div style={{ margin: \"auto\" }}>{message}</div>\r\n                </div>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import { IoMdAttach } from \"react-icons/io\";\r\n \r\nimport styles from \"./UploadDocumentButton.module.css\";\r\n \r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: Boolean;\r\n}\r\n \r\nexport const UploadDocumentButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`} onClick={onClick}>\r\n            <IoMdAttach />\r\n        </div>\r\n    );\r\n};\r\n \r\n","import * as React from \"react\";\r\nimport \"./FileUpload.css\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { TextField, Divider, Backdrop, CircularProgress, Snackbar, Alert, Tooltip } from \"@mui/material\";\r\nimport { ArrowUpload24Regular, CheckmarkCircle24Filled, Dismiss24Regular, DeleteDismiss24Filled } from \"@fluentui/react-icons\";\r\nimport Dropzone from \"react-dropzone\";\r\n// import FileUploadIcon from \"@mui/icons-material/FileUpload\";\r\nimport { AiOutlineFile } from \"react-icons/ai\";\r\nimport { display } from \"html2canvas/dist/types/css/property-descriptors/display\";\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    fileNames: string[];\r\n    isEmbeddingsLoading: boolean;\r\n    embeddingsLoaded: boolean;\r\n    openAlert: boolean;\r\n    openWarning: boolean;\r\n    infoAlert: boolean;\r\n    openDocClearAlert: boolean;\r\n    handleCloseModal: () => void;\r\n    handleSubmitFile: (event: React.FormEvent) => void;\r\n    handleFileUpload: (uploadedFiles: File[]) => void;\r\n    handleAlertClose: () => void;\r\n    // handleWarningClose: () => void;\r\n    // clearEmbeddings: () => void;\r\n    deleteEmbeddings: () => void;\r\n    openSnackbar: boolean;\r\n    snackbarMessage: string;\r\n    handleSnackbarClose: () => void;\r\n    // handleinfoAlertClose: () => void;\r\n}\r\n\r\nexport default function FileUploadModal({\r\n    open,\r\n    fileNames,\r\n    isEmbeddingsLoading,\r\n    embeddingsLoaded,\r\n    openAlert,\r\n    openWarning,\r\n    infoAlert,\r\n    openDocClearAlert,\r\n    handleCloseModal,\r\n    handleSubmitFile,\r\n    handleFileUpload,\r\n    handleAlertClose,\r\n    // handleWarningClose,\r\n    // handleinfoAlertClose,\r\n    // clearEmbeddings,\r\n    deleteEmbeddings,\r\n    openSnackbar,\r\n    snackbarMessage,\r\n    handleSnackbarClose\r\n}: Props) {\r\n    // const [open, setOpen] = React.useState(false);\r\n    // const handleOpen = () => setOpen(true);\r\n    // const handleClose = () => setOpen(false);\r\n\r\n    return (\r\n        <div>\r\n            <Modal open={open} onClose={handleCloseModal} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\r\n                <Box className=\"upload-box\">\r\n                    <div className=\"flex-row-2\">\r\n                        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" sx={{ display: \"inline-block\", width: \"75%\" }}>\r\n                            Upload Document\r\n                        </Typography>\r\n                        <Button variant=\"text\" onClick={handleCloseModal}>\r\n                            <Dismiss24Regular />\r\n                        </Button>\r\n                    </div>\r\n                    {/* <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                        Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\r\n                    </Typography> */}\r\n                    <form onSubmit={handleSubmitFile}>\r\n                        <Box sx={{ px: 2, m: 2 }}>\r\n                            <Dropzone onDrop={handleFileUpload}>\r\n                                {({ getRootProps, getInputProps }) => (\r\n                                    <Box\r\n                                        {...getRootProps()}\r\n                                        className=\"center-column\"\r\n                                        sx={{\r\n                                            height: 360,\r\n                                            width: \"100%\",\r\n                                            p: 2,\r\n                                            border: \"1px dashed grey\",\r\n                                            borderTop: \"4px solid #0197f6\",\r\n                                            borderRadius: \"16px\"\r\n                                        }}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n                                        <Box>\r\n                                            {fileNames.length > 0 ? (\r\n                                                <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                                                    <AiOutlineFile style={{ fontSize: 30, margin: \"auto\", marginTop: 30, marginBottom: 10 }} />\r\n                                                    <Typography sx={{ m: \"auto\" }}>Selected file:</Typography>\r\n                                                    <ul>\r\n                                                        {fileNames.map((name, index) => (\r\n                                                            <li key={index}>{name}</li>\r\n                                                        ))}\r\n                                                    </ul>\r\n                                                </Box>\r\n                                            ) : (\r\n                                                <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                                                    {/* <FileUploadIcon style={{ fontSize: 30 }} /> */}\r\n                                                    <ArrowUpload24Regular style={{ fontSize: 30, margin: \"auto\", marginTop: 30, marginBottom: 10 }} />\r\n                                                    <Typography sx={{ m: \"auto\", textAlign: \"center\" }}>\r\n                                                        Drag and drop a PDF/TXT/DOCX/PPTX/CSV/XLSX file here or Click to browse\r\n                                                    </Typography>\r\n                                                    <Typography sx={{ m: \"auto\" }}>{\"[Total File Size Limit: 10MB]\"}</Typography>\r\n                                                </Box>\r\n                                            )}\r\n                                        </Box>\r\n                                    </Box>\r\n                                )}\r\n                            </Dropzone>\r\n                            {embeddingsLoaded && (\r\n                                <Box sx={{ marginTop: -4, marginLeft: 1 }}>\r\n                                    <CheckmarkCircle24Filled color=\"green\" />\r\n                                </Box>\r\n                            )}\r\n                        </Box>\r\n                        <Box sx={{ py: 4 }}>\r\n                            <Typography variant=\"h6\"></Typography>\r\n                            <Divider />\r\n                        </Box>\r\n\r\n                        <div className=\"flex-row-2\">\r\n                            <Box className=\"center-column\" sx={{ display: \"inline-block\", width: \"75%\" }}>\r\n                                <Button variant=\"contained\" type=\"submit\" sx={{ width: 200 }}>\r\n                                    Submit\r\n                                </Button>\r\n                            </Box>\r\n                            <Box sx={{ display: \"inline-block\" }} onClick={deleteEmbeddings}>\r\n                                <Tooltip title=\"Delete File\" placement=\"top\">\r\n                                    <Button>\r\n                                        <DeleteDismiss24Filled color=\"red\" />\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Box>\r\n                        </div>\r\n                    </form>\r\n                    <Backdrop sx={{ color: \"#fff\", zIndex: theme => theme.zIndex.drawer + 4 }} open={isEmbeddingsLoading}>\r\n                        <CircularProgress color=\"inherit\" />\r\n                    </Backdrop>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} severity=\"success\" sx={{ width: \"100%\" }}>\r\n                    File uploaded successfully !\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openWarning} autoHideDuration={6000} onClose={handleAlertClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\r\n                <Alert onClose={handleAlertClose} severity=\"warning\" sx={{ width: \"100%\" }}>\r\n                    File with maximum size of 10MB is allowed !\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar\r\n                open={openSnackbar} // State controlling whether the Snackbar is open\r\n                autoHideDuration={4500}\r\n                onClose={handleSnackbarClose} // Function to handle closing the Snackbar\r\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n            >\r\n                <Alert onClose={handleSnackbarClose} severity=\"error\" sx={{ width: \"100%\" }}>\r\n                    {snackbarMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openDocClearAlert} autoHideDuration={12000} onClose={handleAlertClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\r\n                <Alert onClose={handleAlertClose} severity=\"info\" sx={{ width: \"100%\" }}>\r\n                    *The responses are not being fetched from the document.\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={infoAlert} autoHideDuration={6000} onClose={handleAlertClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\r\n                <Alert onClose={handleAlertClose} severity=\"info\" sx={{ width: \"100%\" }}>\r\n                    File with size above 5MB takes more time to process, Please be patient !\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { useBoolean } from \"@fluentui/react-hooks\";\r\nimport { DefaultButton, Text } from \"@fluentui/react\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\nimport styles from \"./Chat.module.css\";\r\nimport { chatApi, Approaches, AskResponse, ChatRequest, ChatTurn } from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { IDropdownOption } from \"@fluentui/react/lib/Dropdown\";\r\nimport { Access } from \"../../api\";\r\nimport { accessApi } from \"../../api\";\r\nimport { UploadDocumentButton } from \"../../components/UploadDocumentButton/UploadDocument\";\r\nimport FileUploadModal from \"../../components/FileUpload/FileUpload\";\r\nimport { FileUpload, uploadApi } from \"../../api\";\r\nimport { Snackbar, Alert, AlertTitle } from \"@mui/material\";\r\nimport \"../../components/Navbar/navbar.css\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { selectedMessageAtom } from \"../../components/UserChatMessage/Atom\";\r\nimport { FaStop } from \"react-icons/fa6\";\r\nimport { useTheme } from \"../../ThemeContext\";\r\n\r\ninterface ChatProps {\r\n    isSideBarOpen: boolean;\r\n    promptTemplate: string;\r\n    setPromptTemplate: (promptTemplate: string) => void;\r\n}\r\n\r\nconst Chat = ({ isSideBarOpen, promptTemplate, setPromptTemplate }: ChatProps) => {\r\n    // console.log(\"inChat \", isSideBarOpen);\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    // const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [isScreenSmall, setIsScreenSmall] = useState<boolean>(window.innerWidth < 769);\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isAnswerCompleted, setAnswerCompletion] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [isOpen, { setTrue: openHelpWindow, setFalse: dismissHelpWindow }] = useBoolean(false);\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const modelApproach = useRef<string>(\"GPT3.5\");\r\n    const [modelApproachState, setModelApproachState] = useState<string>(\"GPT3.5\");\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\r\n    const [sliderValue, setSliderValue] = useState(5);\r\n    const promptHasChanged = useRef<boolean>(false);\r\n    const sliderAriaValueText = (value: number) => `${value / 10}`;\r\n    const sliderValueFormat = (value: number) => `${value / 10}`;\r\n    const [fileUploadPanelOpen, setFileUploadPanelOpen] = useState(false);\r\n    const [fileNames, setFileNames] = useState<string[]>([]);\r\n    const [files, setFiles] = useState<File[]>([]);\r\n    const [isEmbeddingsLoading, setIsEmbeddingsLoading] = useState(false);\r\n    const [embeddingsLoaded, setEmbeddingsLoaded] = useState(false);\r\n    const [openAlert, setOpenAlert] = useState(false);\r\n    const [selectedModel, setSelectedModel] = useState<IDropdownOption | undefined>({ key: \"GPT3.5\", text: \"GPT 3.5\" });\r\n    const [openDocClearAlert, setOpenDocClearAlert] = useState(false);\r\n    const [openDocClearAlertforchat, setOpenDocClearAlertforchat] = useState(false);\r\n    const [openWarning, setWarning] = useState(false);\r\n    const [stopGenerating, setStopGenerating] = useState(false);\r\n    const { isDarkTheme, toggleTheme } = useTheme();\r\n    const [uploaded_files, setuploaded_files] = useState<string[]>([]);\r\n    const [openGuidlinesAlert, setOpenGuidlinesAlert] = useState(false);\r\n\r\n    const onChangeModel = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        setSelectedModel(item);\r\n    };\r\n\r\n    const sliderOnChange = (value: number) => setSliderValue(value);\r\n\r\n    const getStyles = () => ({\r\n        main: [\r\n            {\r\n                selectors: {\r\n                    [\"@media (min-width: 720px)\"]: {\r\n                        maxHeight: \"90%\",\r\n                        minWidth: \"800px\",\r\n                        maxWidth: \"900px\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    });\r\n\r\n    const openFileUploadPanel = () => {\r\n        if (!isAnswerCompleted) setFileUploadPanelOpen(true);\r\n    };\r\n    const closeFileUploadPanel = () => {\r\n        setFileUploadPanelOpen(false);\r\n    };\r\n\r\n    const handleSubmitFile = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        setIsEmbeddingsLoading(true);\r\n\r\n        // const prevFileNamesCopy = [...fileNames];\r\n        // console.log(\"prevFileNamesCopy: \", prevFileNamesCopy);\r\n\r\n        try {\r\n            if (files.length > 0) {\r\n                const request: FileUpload = {\r\n                    files: files\r\n                };\r\n\r\n                const response = await uploadApi(request);\r\n\r\n                // console.log(\"API Response:\", response);\r\n\r\n                if (response.status === \"success\") {\r\n                    setOpenAlert(true);\r\n                    setEmbeddingsLoaded(true);\r\n                    setFileNames([]);\r\n                    // Assuming files is an array of File objects\r\n                    const uploadedFileNames = files.map(file => file.name);\r\n\r\n                    // Append the uploaded file names to the fileNames state\r\n                    setuploaded_files(prevFileNames => [...prevFileNames, ...uploadedFileNames]);\r\n                }\r\n            }\r\n        } catch (error: unknown) {\r\n            console.error(\"Error uploading files:\", error);\r\n            setFileNames([]);\r\n            // Set state to show Snackbar with error message\r\n            if (error instanceof Error) {\r\n                if (error.message === \"try_after_some_time\") {\r\n                    console.error(\"if try_after_some_time\");\r\n                    setSnackbarMessage(\"Please Try after some time\");\r\n                    setOpenSnackbar(true);\r\n                    // setFileNames(prevFileNamesCopy);\r\n                } else if (error.message === \"file_size_error\") {\r\n                    console.error(\"if file_size_error\");\r\n                    setSnackbarMessage(\"Upload small size files, or try with few number of files\");\r\n                    setOpenSnackbar(true);\r\n                    // setFileNames(prevFileNamesCopy);\r\n                } else if (error.message === \"csv_excel_error\") {\r\n                    console.error(\"if csv_excel:\", error);\r\n                    setSnackbarMessage(\"Upload Single Excel or CSV File, Cannot be uploaded with multiple files.\");\r\n                    setOpenSnackbar(true);\r\n                    // setFileNames(prevFileNamesCopy);\r\n                } else if (error.message === \"csv_excel_already_present_error\") {\r\n                    console.error(\"if csv_excel_already_present:\", error);\r\n                    setSnackbarMessage(\"CSV/Excel already uploaded, Clear it and try uploading\");\r\n                    setOpenSnackbar(true);\r\n                    // setFileNames(prevFileNamesCopy);\r\n                } else if (error.message === \"unstructured_data_already_uploaded\") {\r\n                    console.error(\"if unstructured_data_already_uploaded:\", error);\r\n                    setSnackbarMessage(\"Delete the previously uploaded files before uploading CSV/Excel, and try uploading\");\r\n                    setOpenSnackbar(true);\r\n                    // setFileNames(prevFileNamesCopy);\r\n                } else {\r\n                    console.error(\"else:\", error);\r\n                    setSnackbarMessage(\"Please Try after some time\");\r\n                    setOpenSnackbar(true); // Assuming you have setOpenSnackbar to control the visibility\r\n                    // alert(\"Error uploading files. Please check the console for details.\");\r\n                    // setFileNames(prevFileNamesCopy);\r\n                }\r\n            }\r\n\r\n            // console.log(\"catch error\");\r\n        } finally {\r\n            setIsEmbeddingsLoading(false);\r\n        }\r\n    };\r\n\r\n    const [infoAlert, setInfoAlert] = useState(false);\r\n\r\n    const handleAlertClose = () => {\r\n        setOpenAlert(false);\r\n        setWarning(false);\r\n        setInfoAlert(false);\r\n        setOpenDocClearAlert(false);\r\n        setOpenDocClearAlertforchat(false);\r\n        setOpenGuidlinesAlert(false);\r\n    };\r\n\r\n    //Fileupload\r\n    const fileuploadelement = () => {\r\n        return (\r\n            <div className={styles.upload} style={{ fontSize: \"30px\", marginLeft: \"4px\" }}>\r\n                <UploadDocumentButton className={!isAnswerCompleted ? styles.commandButton : styles.commandButtonDisabled} onClick={openFileUploadPanel} />\r\n                <FileUploadModal\r\n                    open={fileUploadPanelOpen}\r\n                    embeddingsLoaded={embeddingsLoaded}\r\n                    isEmbeddingsLoading={isEmbeddingsLoading}\r\n                    fileNames={fileNames}\r\n                    openAlert={openAlert}\r\n                    openWarning={openWarning}\r\n                    infoAlert={infoAlert}\r\n                    openDocClearAlert={openDocClearAlert}\r\n                    handleCloseModal={closeFileUploadPanel}\r\n                    handleFileUpload={handleFileUpload}\r\n                    handleSubmitFile={handleSubmitFile}\r\n                    handleAlertClose={handleAlertClose}\r\n                    deleteEmbeddings={deleteEmbeddings}\r\n                    openSnackbar={openSnackbar}\r\n                    snackbarMessage={snackbarMessage}\r\n                    handleSnackbarClose={handleSnackbarClose}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleFileUpload = (uploadedFiles: File[]) => {\r\n        //initialize\r\n        setFiles([]);\r\n        setFileNames([]);\r\n        // setEmbeddingsLoaded(false);\r\n\r\n        const allowedExtensions = /(\\.pdf|\\.txt|\\.pptx|\\.docx|\\.csv|\\.xlsx)$/i;\r\n\r\n        uploadedFiles.forEach(file => {\r\n            if (!allowedExtensions.exec(file.name)) {\r\n                alert(\"Please upload PDF/TXT/DOCX/PPTX/CSV/XLSX files only\");\r\n                return;\r\n            }\r\n\r\n            if (file.size > 10 * 1000 * 1024) {\r\n                setWarning(true);\r\n                return;\r\n            }\r\n\r\n            if (file.size > 5 * 1000 * 1024) {\r\n                setInfoAlert(true);\r\n            }\r\n\r\n            setFiles(prevFiles => [...prevFiles, file]);\r\n            setFileNames(prevFileNames => [...prevFileNames, file.name]);\r\n        });\r\n    };\r\n\r\n    //Prompt\r\n    const closeConfigPanel = () => {\r\n        setIsConfigPanelOpen(false);\r\n        if (promptHasChanged.current == true) {\r\n            clearChat();\r\n            promptHasChanged.current = false;\r\n        }\r\n    };\r\n\r\n    const clearPrompt = () => {\r\n        setPromptTemplate(\"\");\r\n        clearChat();\r\n    };\r\n\r\n    const deleteEmbeddings = () => {\r\n        embeddingInit();\r\n        setOpenDocClearAlert(true);\r\n        clearEmbeddings();\r\n    };\r\n    const deleteEmbeddingsforchat = () => {\r\n        embeddingInit();\r\n        setOpenDocClearAlertforchat(true);\r\n        clearEmbeddings();\r\n        setOpenGuidlinesAlert(false);\r\n    };\r\n\r\n    const embeddingInit = () => {\r\n        setFiles([]);\r\n        setFileNames([]);\r\n        setEmbeddingsLoaded(false);\r\n    };\r\n    const clearEmbeddings = () => {\r\n        // Call the API to delete the folder on the backend\r\n        setuploaded_files([]);\r\n        fetch(\"/delete-folder\", {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n                // Include any other headers your backend requires, such as authentication tokens\r\n            }\r\n            // If you need to send data along with the delete request, include it here.\r\n            // body: JSON.stringify({ folderName: 'folder_to_delete' }),\r\n        })\r\n            .then(response => {\r\n                // Check if the response status code is not in the range 200-299\r\n                if (!response.ok) {\r\n                    return response.text().then(text => {\r\n                        throw new Error(text || \"Server responded with an error!\");\r\n                    });\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                console.log(\"Folder deleted successfully:\", data);\r\n                // Clear state only after the folder has been successfully deleted\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error deleting the folder:\", error.message);\r\n                // Handle the error state here if needed\r\n            });\r\n\r\n        // Open the alert to notify the user\r\n    };\r\n\r\n    async function stopGeneratingAnswer() {\r\n        setStopGenerating(true);\r\n        console.log(\"stopping answer generation\");\r\n    }\r\n\r\n    let stop = false;\r\n\r\n    //API CALL\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\r\n            const request: ChatRequest = {\r\n                history: [...history, { user: question, bot: undefined }],\r\n                approach: embeddingsLoaded ? Approaches.DocumentQNA : Approaches.General,\r\n                shouldStream: shouldStream,\r\n                overrides: {\r\n                    modelType: modelApproach.current,\r\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                    suggestFollowupQuestions: useSuggestFollowupQuestions,\r\n                    temperature: sliderValue / 10\r\n                }\r\n            };\r\n\r\n            console.log(request + \" as request \");\r\n\r\n            setAnswerCompletion(true);\r\n\r\n            const response = await chatApi(request);\r\n\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (shouldStream) {\r\n                let answer: string = \"\";\r\n                // let isAnswerCompleted: boolean = false;\r\n                let askResponse: AskResponse = {} as AskResponse;\r\n\r\n                for await (const event of readNDJSONStream(response.body)) {\r\n                    // console.log(\"inside loop: \", document.getElementById(\"stop\")?.innerText)\r\n                    if (document.getElementById(\"stop\")?.title == \"Continue\") {\r\n                        // if (document.getElementById(\"stop\")?.innerHTML == \"Continue\") {\r\n                        setStopGenerating(false);\r\n                        break;\r\n                    }\r\n                    if (event[\"data_points\"]) {\r\n                        askResponse = event;\r\n                    } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\r\n                        answer += event[\"choices\"][0][\"delta\"][\"content\"];\r\n                        let latestResponse: AskResponse = { ...askResponse, answer: answer };\r\n                        setIsLoading(false);\r\n                        setAnswers([...answers, [question, latestResponse]]);\r\n                        // console.log(\"answer\", answer);\r\n                    } else if (event[\"error\"]) {\r\n                        alert(event[\"error\"]);\r\n                    }\r\n                    // console.log(\"event\", JSON.stringify(event));\r\n                }\r\n                setAnswerCompletion(false);\r\n                setContentValue(\"\");\r\n                setContent(false);\r\n            } else {\r\n                const parsedResponse: AskResponse = await response.json();\r\n\r\n                if (response.status > 299 || !response.ok) {\r\n                    throw Error(parsedResponse.error || \"Unknown error\");\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    //Clear Chat\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    //snackbar for error message\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n\r\n    const handleSnackbarClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n    //check for permitted users, Access :\r\n    const [hasAccess, setHasAccess] = useState<Access>({ hasModAccess: false });\r\n\r\n    const makeAccessApiRequest = async () => {\r\n        try {\r\n            const response = await accessApi();\r\n            console.log(response);\r\n            setHasAccess(response);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // This function will be called only once during the initial render\r\n\r\n        try {\r\n            embeddingInit();\r\n            clearEmbeddings();\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        makeAccessApiRequest();\r\n\r\n        // Cleanup function (optional)\r\n        return () => {\r\n            console.log(hasAccess);\r\n        };\r\n    }, []);\r\n\r\n    const handleModelApproachChange = (_ev?: React.MouseEvent<HTMLElement>, newAlignment?: string) => {\r\n        setModelApproachState(newAlignment || \"GPT3.5\");\r\n        modelApproach.current = newAlignment || \"GPT3.5\";\r\n        console.log(newAlignment);\r\n        clearChat();\r\n    };\r\n\r\n    const handleClick = () => {\r\n        // Open another link\r\n        window.open(\r\n            // \"https://sankyopharma.sharepoint.com/sites/DSTeam_CoE_AIML/Shared%20Documents/Forms/AllItems.aspx?isAscending=true&OR=Teams%2DHL&CT=1710835373668&clickparams=eyJBcHBOYW1lIjoiVGVhbXMtRGVza3RvcCIsIkFwcFZlcnNpb24iOiIyNy8yNDAyMDExOTMwNyIsIkhhc0ZlZGVyYXRlZFVzZXIiOmZhbHNlfQ%3D%3D&sortField=LinkFilename&id=%2Fsites%2FDSTeam%5FCoE%5FAIML%2FShared%20Documents%2FGeneral%2FOpen%20AI%20Enablement%2F00%20Documents%20Approved%20by%20Legal%2C%20Compliance%2C%20Comms%2FChatDSI%20Usage%20Guidelines%5F3%2D26%2D24%2Epdf&viewid=b54b96d0%2Dd392%2D4730%2Db9a0%2D5ead22297885&parent=%2Fsites%2FDSTeam%5FCoE%5FAIML%2FShared%20Documents%2FGeneral%2FOpen%20AI%20Enablement%2F00%20Documents%20Approved%20by%20Legal%2C%20Compliance%2C%20Comms\",\r\n            // \"_blank\"\r\n            \"https://sankyopharma.sharepoint.com/:b:/s/DSTeam_CoE_AIML/ETF4r68T6mtFvor7wgAhrLQBHh-g4dzaSzVvZNef3J4Uug?e=h6eeNO\",\r\n            \"_blank\"\r\n        );\r\n    };\r\n\r\n    // Creativity button\r\n    const [selectedButton, setSelectedButton] = useState(\"More Balanced\");\r\n    const handleButtonClick = (buttonName: string) => {\r\n        setSelectedButton(buttonName);\r\n        // Set slider value based on button clicked\r\n        switch (buttonName) {\r\n            case \"More Creative\":\r\n                setSliderValue(10);\r\n                break;\r\n            case \"More Balanced\":\r\n                setSliderValue(5);\r\n                break;\r\n            case \"More Precise\":\r\n                setSliderValue(1);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    // const [isNavbarExpanded, setIsNavbarExpanded] = useState(false);\r\n    const [, setSelectedMessage] = useRecoilState(selectedMessageAtom);\r\n    const [contentValue, setContentValue] = useState<string>(\"\");\r\n    const [isContent, setContent] = useState<boolean>(false);\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setIsScreenSmall(window.innerWidth < 769);\r\n        };\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n\r\n    if (isSideBarOpen && isScreenSmall) {\r\n        return null; // or you can return <div></div> or any placeholder content\r\n    }\r\n    return (\r\n        <div className={` ${isSideBarOpen ? styles.shrunk : styles.container}`}>\r\n            {\" \"}\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <p className={styles.disclaimerText} style={{ filter: isDarkTheme ? \"brightness(20)\" : \"brightness(1)\" }}>\r\n                                *ChatDSI is designed to engage in natural language conversations, answer questions, and assist with various tasks but currently\r\n                                cannot access DSI repositories to obtain internally stored information. Since it is an AI-powered assistant, output should\r\n                                always be validated by a human prior to use. Please follow the{\" \"}\r\n                                <span onClick={handleClick} style={{ textDecoration: \"underline\", cursor: \"pointer\" }}>\r\n                                    ChatDSI Usage Guidelines\r\n                                </span>{\" \"}\r\n                                at all times.\r\n                            </p>\r\n                            {/* <Query /> */}\r\n                            <div className={styles.boxesContainerquerySuggestion}>\r\n                                <div\r\n                                    className={styles.boxquerySuggestion}\r\n                                    onClick={() => setSelectedMessage(\"Show me an example of R code to run a Kaplan-Meier plot using a survival package.\")}\r\n                                >\r\n                                    <p className={styles.querytitle}>Coding</p>\r\n                                    “Show me an example of R code to run a Kaplan-Meier plot using a survival package.”\r\n                                </div>\r\n                                <div\r\n                                    className={styles.hideboxquerySuggestion}\r\n                                    onClick={() =>\r\n                                        setSelectedMessage(\"Provide an easy-to-read summary of the following article that is no more than 750 words: \")\r\n                                    }\r\n                                >\r\n                                    <p className={styles.querytitle}>Summarization</p>\r\n                                    “Provide an easy-to-read summary of the following article that is no more than 750 words: ”\r\n                                </div>\r\n                                <div\r\n                                    className={styles.boxquerySuggestion}\r\n                                    onClick={() =>\r\n                                        setSelectedMessage(\r\n                                            \"Please refine the conclusion of my research paper on the impact of artificial intelligence in drug discovery to make it clearer and emphasize the following findings:\"\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <p className={styles.querytitle}>Writing Assistance</p>\r\n                                    “Please refine the conclusion of my research paper on the impact of artificial intelligence in drug discovery to make it\r\n                                    clearer and emphasize the following findings: ”\r\n                                </div>\r\n                                <div\r\n                                    className={styles.boxquerySuggestion}\r\n                                    onClick={() =>\r\n                                        setSelectedMessage(\r\n                                            \"Explore the possibility of predicting individual health outcomes based on various factors (genetics, lifestyle, medical history). Develop a predictive model that tailors recommendations for personalized healthcare interventions.\"\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <p className={styles.querytitle}>Summarization</p>\r\n                                    “Explore the possibility of predicting individual health outcomes based on various factors (genetics, lifestyle, medical\r\n                                    history). Develop a predictive model that tailors recommendations for personalized healthcare interventions.”\r\n                                </div>\r\n                                <div\r\n                                    className={styles.hideboxquerySuggestion}\r\n                                    onClick={() => setSelectedMessage(\"In Excel (Office 365), how do I remove duplicate entries from a column of data? \")}\r\n                                >\r\n                                    <p className={styles.querytitle}>Tutoring</p>\r\n                                    “In Excel (Office 365), how do I remove duplicate entries from a column of data?”\r\n                                </div>\r\n                                <div\r\n                                    className={styles.hideboxquerySuggestion}\r\n                                    onClick={() => setSelectedMessage(\"Create a job description for a Data Analyst to work in [open role] at Daiichi Sankyo.\")}\r\n                                >\r\n                                    <p className={styles.querytitle}>Creation</p>\r\n                                    \"Create a job description for a Data Analyst to work in [open role] at Daiichi Sankyo.”\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.cylindricalBar}>\r\n                                <div className={styles.responseStyle}>Select Response Style</div>\r\n                                <div className={styles.buttonContainer}>\r\n                                    <DefaultButton\r\n                                        className={`${styles.temperatureButton} ${selectedButton === \"More Creative\" ? styles.clicked : \"\"}`}\r\n                                        onClick={() => handleButtonClick(\"More Creative\")}\r\n                                    >\r\n                                        More Creative\r\n                                    </DefaultButton>\r\n                                    <DefaultButton\r\n                                        className={`${styles.temperatureButton} ${selectedButton === \"More Balanced\" ? styles.clicked : \"\"}`}\r\n                                        onClick={() => handleButtonClick(\"More Balanced\")}\r\n                                    >\r\n                                        More Balanced\r\n                                    </DefaultButton>\r\n                                    <DefaultButton\r\n                                        className={`${styles.temperatureButton} ${selectedButton === \"More Precise\" ? styles.clicked : \"\"}`}\r\n                                        onClick={() => handleButtonClick(\"More Precise\")}\r\n                                    >\r\n                                        More Precise\r\n                                    </DefaultButton>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {answers.map((answer, index) => (\r\n                                <div key={index}>\r\n                                    <UserChatMessage message={answer[0]} />\r\n                                    {/* {answers.length} and {index + 1} and {answer[0]} and {lastQuestionRef.current} */}\r\n                                    <div className={styles.chatMessageGpt}>\r\n                                        <Answer\r\n                                            key={index}\r\n                                            answer={answer[1]}\r\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                            isAnswerCompleted={isAnswerCompleted && answers.length === index + 1 && answer[0] === lastQuestionRef.current}\r\n                                            regenerateResponse={answers.length === index + 1 && answer[0] === lastQuestionRef.current}\r\n                                            regenerateQuestion={answer[0]}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n                    {/* Chat Input */}\r\n                    <div className={styles.chatInput}>\r\n                        {/* Stop Generate  */}\r\n                        <div>\r\n                            {isAnswerCompleted && !isLoading && (\r\n                                <button\r\n                                    className={styles.stopButtonContent}\r\n                                    onClick={() => {\r\n                                        stopGeneratingAnswer();\r\n                                    }}\r\n                                >\r\n                                    <div id=\"stop\" className={styles.stopButton} title={`${stopGenerating ? \"Continue\" : \"Stop Generate Response\"}`}>\r\n                                        <FaStop style={{ fontSize: \"11px\" }} />\r\n                                        {/* {\" \"} */}\r\n                                    </div>\r\n                                    <div className={styles.stopText1} style={{ color: isDarkTheme ? \"white\" : \"black\" }}>\r\n                                        Stop Responding\r\n                                    </div>\r\n                                </button>\r\n                            )}\r\n                            {/* QuestionInput/ Input Bar / Chat Input*/}\r\n                            <QuestionInput\r\n                                fileuploadelement={fileuploadelement()}\r\n                                clearchat={clearChat}\r\n                                isLoading={isLoading}\r\n                                lastQuestionRef={lastQuestionRef}\r\n                                clearOnSend\r\n                                disabled={isAnswerCompleted}\r\n                                onSend={question => makeApiRequest(question)}\r\n                                placeholder=\"Ask me a question...\"\r\n                                value={isContent ? contentValue : \"\"}\r\n                                isContent={isContent}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.chatInput}>\r\n                        {embeddingsLoaded == false ? (\r\n                            <>\r\n                                <Text className={styles.customPromptMessageResponse} style={{ color: isDarkTheme ? \"white\" : \"black\" }}>\r\n                                    {\r\n                                        // isLoading &&\r\n                                        isAnswerCompleted && (\r\n                                            <>\r\n                                                {\" \"}\r\n                                                The response is being generated <span className={styles.loadingdots} />{\" \"}\r\n                                            </>\r\n                                        )\r\n                                    }\r\n                                </Text>\r\n                            </>\r\n                        ) : (\r\n                            // disclaimer Message for file upload\r\n                            <div className={styles.customPromptMessage}>\r\n                                <Text\r\n                                    className={styles.customPromptMessage}\r\n                                    style={{ color: isDarkTheme ? \"white\" : \"black\", marginBottom: promptTemplate == \"\" ? \"0\" : \"-5px\", fontSize: \"11px\" }}\r\n                                >\r\n                                    {uploaded_files[0].endsWith(\".xlsx\") ? (\r\n                                        <>\r\n                                            {`The responses are being fetched from the document ${uploaded_files[0]}.`}\r\n                                            <span onClick={() => setOpenGuidlinesAlert(!openGuidlinesAlert)} className={styles.guidelines}>\r\n                                                Guidelines...\r\n                                            </span>\r\n                                            <Snackbar\r\n                                                open={openGuidlinesAlert}\r\n                                                // autoHideDuration={12000}\r\n                                                onClose={handleAlertClose}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                sx={{ marginBottom: \"10%\" }}\r\n                                            >\r\n                                                <Alert onClose={handleAlertClose} severity=\"info\" sx={{ width: \"100%\" }}>\r\n                                                    <AlertTitle sx={{ fontSize: \"11px\", fontWeight: \"800\" }}>Guidelines to Q&A with Excel File:</AlertTitle>\r\n                                                    <p style={{ fontSize: \"11px\" }}>\r\n                                                        {`• Mention the column name and worksheet name (if multiple columns of the same name are present \r\n                                                        in other worksheets as well) from which you want the data to be extracted.\r\n                                                        • Mention the worksheet name, in addition to the question in the input.\r\n                                                        • Kindly be more specific about the ask in the input.`}\r\n                                                    </p>\r\n                                                </Alert>\r\n                                            </Snackbar>\r\n                                        </>\r\n                                    ) : uploaded_files[0].endsWith(\".csv\") ? (\r\n                                        <>\r\n                                            {`The responses are being fetched from the document ${uploaded_files[0]}.`}\r\n                                            <span onClick={() => setOpenGuidlinesAlert(true)} className={styles.guidelines}>\r\n                                                Guidelines...\r\n                                            </span>\r\n                                            <Snackbar\r\n                                                open={openGuidlinesAlert}\r\n                                                // autoHideDuration={12000}\r\n                                                onClose={handleAlertClose}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                sx={{ marginBottom: \"8%\" }}\r\n                                            >\r\n                                                <Alert onClose={handleAlertClose} severity=\"info\" sx={{ width: \"100%\" }}>\r\n                                                    <AlertTitle sx={{ fontSize: \"11px\", fontWeight: \"800\" }}>Guidelines to Q&A with CSV File:</AlertTitle>\r\n                                                    <p style={{ fontSize: \"11px\" }}>\r\n                                                        {`• Mention the column name from which you want the data to be extracted.\r\n                                                        • Kindly be more specific about the ask in the input.`}\r\n                                                    </p>\r\n                                                </Alert>\r\n                                            </Snackbar>\r\n                                        </>\r\n                                    ) : (\r\n                                        `The responses are being fetched from document ${uploaded_files[0]}.`\r\n                                    )}\r\n                                    {/* Custom Prompt */}\r\n\r\n                                    {/* Clear Document */}\r\n                                    <button className={styles.clearPrompt} onClick={deleteEmbeddingsforchat} style={{ color: isDarkTheme ? \"white\" : \"\" }}>\r\n                                        <Text>\r\n                                            <u>\r\n                                                <i>Clear Document</i>\r\n                                            </u>\r\n                                        </Text>\r\n                                    </button>\r\n                                </Text>\r\n                            </div>\r\n                        )}\r\n                        {promptTemplate == \"\" ? (\r\n                            <div></div>\r\n                        ) : (\r\n                            !isAnswerCompleted && (\r\n                                <div className={styles.customPromptMessage}>\r\n                                    <Text\r\n                                        className={styles.customPromptMessage}\r\n                                        style={{\r\n                                            color: isDarkTheme ? \"white\" : \"\",\r\n                                            fontSize: \"11px\",\r\n                                            // marginBottom: embeddingsLoaded == false ? \"0\" : \"-5px\",\r\n                                            // marginBottom: !embeddingsLoaded ? \"0\" : \"5px\",\r\n                                            // marginTop: !embeddingsLoaded ? \"0\" : \"-5px\",\r\n                                            overflow: \"hidden\"\r\n                                        }}\r\n                                    >\r\n                                        *Assistant behaviour is being modified by custom prompt.\r\n                                        <button className={styles.clearPrompt} onClick={clearPrompt}>\r\n                                            <Text>\r\n                                                <u>\r\n                                                    <i>Clear Prompt</i>\r\n                                                </u>\r\n                                            </Text>\r\n                                        </button>\r\n                                    </Text>\r\n                                </div>\r\n                            )\r\n                        )}\r\n                        <QuestionInput\r\n                            fileuploadelement={fileuploadelement()}\r\n                            clearchat={clearChat}\r\n                            isLoading={isLoading}\r\n                            lastQuestionRef={lastQuestionRef}\r\n                            clearOnSend\r\n                            placeholder=\"Ask me a question...\"\r\n                            disabled={isAnswerCompleted}\r\n                            onSend={question => makeApiRequest(question)}\r\n                            value={contentValue}\r\n                            isContent={isContent}\r\n                        />\r\n                        <Snackbar\r\n                            open={openDocClearAlertforchat}\r\n                            autoHideDuration={12000}\r\n                            onClose={handleAlertClose}\r\n                            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                        >\r\n                            <Alert onClose={handleAlertClose} severity=\"info\" sx={{ width: \"100%\" }}>\r\n                                *The responses are not being fetched from the document.\r\n                            </Alert>\r\n                        </Snackbar>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport Chat from \"./pages/AIchat/Chat\";\r\nimport { ThemeProvider } from \"./ThemeContext\";\r\n\r\ninitializeIcons();\r\nfunction App() {\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n\r\n    // Define the router configuration\r\n    const router = createHashRouter([\r\n        {\r\n            path: \"/\",\r\n            element: (\r\n                <Layout\r\n                    isSidebarOpen={isSidebarOpen}\r\n                    setIsSidebarOpen={setIsSidebarOpen}\r\n                    promptTemplate={promptTemplate}\r\n                    setPromptTemplate={setPromptTemplate}\r\n                />\r\n            ),\r\n            children: [\r\n                {\r\n                    index: true,\r\n                    element: <Chat isSideBarOpen={isSidebarOpen} promptTemplate={promptTemplate} setPromptTemplate={setPromptTemplate} />\r\n                },\r\n                {\r\n                    path: \"*\",\r\n                    lazy: () => import(\"./pages/NoPage\")\r\n                }\r\n            ]\r\n        }\r\n    ]);\r\n\r\n    // Render the router\r\n    return (\r\n        <React.StrictMode>\r\n            <ThemeProvider>\r\n                <RouterProvider router={router} />\r\n            </ThemeProvider>\r\n        </React.StrictMode>\r\n    );\r\n}\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(<App />);\r\n"],"file":"assets/index-fb709349.js"}